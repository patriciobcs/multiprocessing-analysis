{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TP OpenMP - October 2022\n",
    "## Part 1 : Pi\n",
    "### Compilation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "!g++ -o tp_openmp_part_1_pi_impl_reduce tp_openmp_part_1_pi_impl_reduce.cpp -fopenmp -O3 -march=native\n",
    "!g++ -o tp_openmp_part_1_pi_impl_atomic tp_openmp_part_1_pi_impl_atomic.cpp -fopenmp -O3 -march=native"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performance evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import subprocess\n",
    "\n",
    "try:\n",
    "    os.remove(\"stats.csv\")\n",
    "except OSError:\n",
    "    pass\n",
    "\n",
    "num_steps = [1000000, 100000000, 10000000000]#, 1000000000000]\n",
    "nb_core = [1, 2, 4, 8]\n",
    "repeats = range(0,10)\n",
    "\n",
    "for nsteps in num_steps:\n",
    "    for ncore in nb_core:\n",
    "        for repeat in repeats:\n",
    "            args = (\"./tp_openmp_part_1_pi_impl_reduce\", \"-C\", str(ncore), \"-N\", str(nsteps))\n",
    "            popen = subprocess.Popen(args, stdout=subprocess.PIPE)\n",
    "            popen.wait()\n",
    "\n",
    "            args = (\"./tp_openmp_part_1_pi_impl_atomic\", \"-C\", str(ncore), \"-N\", str(nsteps))\n",
    "            popen = subprocess.Popen(args, stdout=subprocess.PIPE)\n",
    "            popen.wait()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performance analysis\n",
    "#### Weak scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No handles with labels found to put in legend.\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from numpy import genfromtxt\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "df = pd.read_csv('stats.csv',header=None,names=['version','nbcore','num_steps','runtime'],dtype={\n",
    "                     'version': str,\n",
    "                     'nbcore': int,\n",
    "                     'num_steps' : int,\n",
    "                     'runtime' : float\n",
    "                 })\n",
    "\n",
    "color_num_steps = {1000000 : \"blue\", 100000000 : \"red\", 10000000000 : \"green\", 1000000000000 : \"black\"}\n",
    "\n",
    "for num_steps in df['num_steps']:\n",
    "    df_plot = df[(df['num_steps'] == int(num_steps))]\n",
    "    df_plot = df_plot[df_plot['version'] == \"atomic\"]\n",
    "    \n",
    "    mean_stats = df_plot.groupby(['num_steps','version','nbcore']).mean().reset_index()\n",
    "    \n",
    "    plt.plot(mean_stats['nbcore'], mean_stats['runtime'],linestyle=\"solid\",color=color_num_steps[num_steps])\n",
    "    plt.yscale('log')\n",
    "    plt.xscale('log')\n",
    "    plt.scatter(df_plot['nbcore'], df_plot['runtime'],color=color_num_steps[num_steps])\n",
    "\n",
    "    df_plot = df[(df['num_steps'] == num_steps) & (df['version'] == \"reduce\")]\n",
    "    mean_stats = df_plot.groupby(['num_steps','version','nbcore']).mean().reset_index()\n",
    "    \n",
    "    plt.plot(mean_stats['nbcore'], mean_stats['runtime'],linestyle=\"dashed\",color=color_num_steps[num_steps])\n",
    "    plt.yscale('log')\n",
    "    plt.xscale('log')\n",
    "    plt.scatter(df_plot['nbcore'], df_plot['runtime'],color=color_num_steps[num_steps])\n",
    "    \n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Strong Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Discussion"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.10 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
